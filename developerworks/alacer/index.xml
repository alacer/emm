<?xml version="1.0" encoding="UTF-8"?>
<!--  developerWorks ARTICLE TEMPLATE V6.0 for AUTHORS TEMPLATE updates
        06/07 (egd) Removed tactic code elements, attributes, coding examples, 
        and instructions.
        07/28 (jpp) Added an example of including content from another file.

Welcome, authors!  We hope you find this template easy to use, 
but if you have any questions at all, please consult: 
     - The many comment lines we've included in this file
     - The in-depth article: "Authoring with the developerWorks XML templates,"
         which includes this template and the complete author file package: 
         http://www.ibm.com/developerworks/library/i-dwauthors/
     - Your developerWorks editor.  
     
To make this template simple to complete, we've indicated the items you 
need to fill in versus the ones that you can ignore (for developerWorks staff use).
Remember to keep all element names (the XML coding between angle brackets) 
lowercase.  Avoid span elements, code font elements, CDATA elements, and font 
classes.

In this template, these are the minimum items you'll need to fill in for your article:
  GEOGRAPHY (worldwide [English] or a local site)
  KEYWORDS
  CONTENT-AREA-PRIMARY
  ARTICLE TITLE
  ARTICLE SUBTITLE
  ABSTRACT
  ARTICLE BODY (Includes headings, paragraphs, lists, code listings, sidebars, 
  figures, and tables as needed)

Please send feedback on this template to your developerWorks editor.  Thanks!       
-->
<!-- DW DOCUMENT - REQUIRED
For developerWorks staff use only; do not edit -->
<dw-document xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="..\schema\6.0\dw-document-6.0.xsd"
    xmlns:dw="http://www.ibm.com/developerWorks/">
    <!-- DW-ARTICLE - REQUIRED
AUTHORS:  local-site is a required attribute.  Choose one of the following:
brazil, china, japan, korea, russia,  ssa (for Spanish South America), vietnam, 
worldwide (for English).
Use autonumber="yes" (recommended) to enable automatic numbering of headings 
for code listings, figures, and tables. This setting also is required to enable the use of 
the xref element.
    -->
    <!-- EDITORS: If this is a technical journal, insert a journal attribute in the 
<dw-article> element.  Example: <dw-article local-site="worldwide" skill-level="3" 
journal="IBM WebSphere Developer Technical Journal">.  The stylesheet code 
automatically inserts the tech journal link in the summary area of the article and
the journal title in the meta keywords tag -->
    <dw-article auto-number="yes" local-site="worldwide" skill-level="3"
        page-end-btt-link="yes">
        <!-- ID REQUIRED
For developerWorks staff use only.   -->
        <id cma-id="" original="yes"/>
        <!-- KEYWORDS REQUIRED
For authors: Add unique keywords or key phrases that will help external 
search engines find your content.  Use commas to separate keywords 
and phrases.
For editors: For advice on effective keywords, see 
http://w3.tap.ibm.com/w3ki06/display/developerWorks/developerWorks%20title%20and%20meta%20tag%20guidelines -->
        <keywords content=""/>
        <!-- META-DCTYPE  - REQUIRED - DO NOT remove or alter this element.  -->
        <meta-dctype>
            <cma-defined-type/>
        </meta-dctype>
        <!-- META-DCSUBJECT  - REQUIRED - DO NOT remove or alter this element.  -->
        <meta-dcsubject>
            <cma-defined-subject/>
        </meta-dcsubject>
        <!-- META-LAST-UPDATED - OPTIONAL
For developerWorks staff use only. -->
        <meta-last-updated day="11" month="03" year="2010" initials="egd"/>
        <!-- CONTENT-AREA-PRIMARY - REQUIRED
For authors: select the main developerWorks content area (product or 
technology) that your article applies to if you know it. If you're not sure 
of the correct value,  just select "ibm" and the editorial staff will update it. -->
        <content-area-primary name="java"/>
        <!-- CONTENT-AREA-SECONDARY - OPTIONAL
For authors (optional): Select any related developerWorks content areas 
(product or technology) that your article applies to if you know them. If 
you're not sure,  just select "ibm" and the editorial staff will update it. -->
        <content-area-secondary name="opensource"/>
        <!-- AUTO-DISCOVERY OF WEB FEEDS - OPTIONAL
For editors (optional).  If you have a Web feed associated specifically with this 
content, insert the complete URL for the feed as well as the title of the feed. 
It can be RSS or ATOM. If you have both ATOM and RSS, specify rss. 
<web-feed-autodiscovery feed-url="http://www.ibm.com/developerworks/podcast/channel-dwall.rss" 
      feed-title="IBM developerWorks podcasts" feed-type="rss"/> -->
        <!-- SERIES - OPTIONAL
For authors:  if your article is part of a series or a regular developerWorks 
column, fill in the series title.  If your article is a numbered part in a series, 
include the part number in the series-title element, as in 
<series-title>High-availability middleware on Linux, Part 5</series-title>. 
developerWorks staff will fill in the series-url. -->
        <series>
            <!-- Short, keyword-rich series title.  Along with title, it is used to 
       create the title element, which plays an important part in most search
        engine ranking algorithms. -->
            <series-title>R and Streams</series-title>
            <series-url>http://www.ibm.com/developerworks/views/java/libraryview.jsp?search_by=taming+tiger:</series-url>
        </series>
        <!-- ARTICLE TITLE - REQUIRED
For authors. Short, keyword-rich title.  Along with series title, it is used to create the
title element, which plays an important part in most search engine ranking algorithms.
Try to use short, active verbs in your title.  -->
        <title>Analyzing Streaming Data Using R</title>
        <!-- ARTICLE SUBTITLE - OPTIONAL 
For authors (optional but recommended). -->
        <subtitle></subtitle>
        <!-- RSS IMAGE URL - OPTIONAL
For editors: The image you select will display as the accompanying lead image in the dW 
iPad application. If this is a feature article, please add the feature image; if this 
is not a featured article, but there is an image in the article that would suitably 
represent the content, use that. If neither option is possible (that is, no article 
image is right, or there aren't any), leave the item blank.  NOTE: Must be a fully 
qualified URL as shown. Use the http protocol.   -->
        <rss-image-url>http://www.ibm.com/developerworks/i/t-j-f-immutable_ebf7fb.jpg</rss-image-url>
        <!-- RICH MEDIA SOURCE - OPTIONAL
For editors:  If this content contains inline audios or videos, use the audio and video 
elements within the rich-media-source element to enter the URL for each audio  
and video file.  Enter the transcript URL for each audio and video. If the video has only 
closed captions instead of a separate transcript, leave the <video-transcript-url> tag 
blank.  Be sure to follow these standards for video:
http://w3.tap.ibm.com/w3ki02/display/dwcontent/Rich+media+in+articles+and+landing+pages 
VERY IMPORTANT NOTES:
(1)  These audios and videos will be candidates for dynamic rendering within video 
        and audio players for V17 (Defiant redesign).
(2)  Do not include videos or audios that are in "Related resources" and are not part 
       of your main content.  Also don't include:
       (a) Author short videos that don't have transcripts.
       (b) Demos that already have a demo summary page. 
       (c) dW audios and videos (weekly shows and interviews by Scott Laningham).  
            (For (b) and (c), the landing page or blog (weekly shows and interviews) or the demo 
            summary page that goes with that rich media will include a rich-media-source
            element for those audio and video URLs.)  -->               
        <!-- <rich-media-source>  
            <audio>
                <audio-url>http://www.ibm.com/developerworks/podcasts/twodw/twodw-091411.mp3</audio-url>
                <audio-transcript-url>http://www.ibm.com/developerworks/podcast/dwi/feature050411-champion.html</audio-transcript-url>
            </audio>
            <video> -->
                <!-- For editors: If the video is on YouTube, the video URL should be in the format of this 
                example: http://www.youtube.com/watch?v=Fcwz4MBIs5U -->
                <!-- <video-url>http://www.youtube.com/watch?v=Fcwz4MBIs5U</video-url>
                <video-transcript-url>http://www.ibm.com/developerworks/podcast/dwi/feature050411-champion.html</video-transcript-url>
            </video>            
        </rich-media-source> -->
        <!-- FORUM URL - OPTIONAL
For authors:  if your article has an associated forum, include the forum's 
url. A sample forum is included here. In your resulting article, a link to 
the forum will be included automatically in the Resources section. -->
        <forum-url
            url="http://www.ibm.com/developerworks/forums/dw_forum.jsp?forum=375&amp;cat=5"/>
        <!-- TARGET-CONTENT-FILE  - OPTIONAL
For authors:  if your article has any associated download(s), such as 
sample code, or associated PDFs (not a PDF of the article itself), fill in 
its name, type, size (omit any space in the size attribute: it's 10KB, 
not 10 KB), and description, and be sure to send that code (zipped,
ideally) or PDF to your developerWorks editor. Enter a note about your 
download file if you need to explain something that a user might find
helpful.  By doing so, a superscript number will appear at the end of the 
file description in the HTML.  The note itself will appear in a "Notes" 
subsection created automatically by the stylesheet.  The stylesheet
takes care of numbering the superscripts and notes.  We'll take care 
of the rest.  In your resulting article, a "Downloads" section and a 
corresponding TOC entry will appear. -->

        <!-- EDITORS: IMPORTANT NOTE about download methods:  
dW supports only the http method for downloads.  The schema 
supports ftp and Download Director; however, if you use those 
methods, someone on your team must be responsible for supporting 
them.  If you have questions, please contact Steven Luyendyk.
Also, PLS NOTE that CMA ignores values coded for the link-method 
attribute and displays a link based on the presence of a url attribute 
so please be sure to enter a URL in the url-http attribute (or url-ftp or 
url-dd if your team supports these -  see IMPORTANT NOTE above.)  
If you don't want a method to appear in the download table, leave the 
url attribute blank -->

        <!-- First download or PDF -->
        <!-- Editors: in the url-http, replace [xxx] with your zone folder name 
or other folder you create, and replace [DoNotLeaveThisLink.zip] with a 
name that will be UNIQUE across dW (for example, repeat the tutorial 
filename in the zip filename, as in wa-ajaxintro.zip) -->
        <!-- EDITORS NOTE:  Be sure to DELETE all examples from the 
target-content-file element -->
        <target-content-file filename="DoNotLeaveThisLink.zip" file-type="zip" size="10KB"
            file-description="Sample Perl scripts for this tutorial"
            target-content-type="Code sample" link-method-ftp="no" url-ftp=""
            link-method-http="yes"
            url-http="http://public.dhe.ibm.com/software/dw/xxx/DoNotLeaveThisLink.zip"
            link-method-dd="no" url-download-director="" show-license="yes"
            registration-required="no"/>
        <!-- Second download or PDF. -->
        <!-- Editors: in the url-http, replace [xxx] with your zone folder name or 
other folder you create. -->
        <target-content-file filename="DoNotLeaveThisLink.pdf" file-type="pdf" size="50KB"
            file-description="A related PDF (not of the tutorial)"
            target-content-type="Product documentation" link-method-ftp="no" url-ftp=""
            link-method-http="yes"
            url-http="http://public.dhe.ibm.com/software/dw/xxx/DoNotLeaveThisLink.pdf"
            link-method-dd="no" url-download-director="" show-license="no"
            registration-required="no">
            <!-- The <note> element is OPTIONAL. -->
            <note>This is a sample note about the PDF.</note>
        </target-content-file>
        <!-- TARGET-CONTENT-PAGE - OPTIONAL
For authors:  if your article needs to point to another page that has a link
to a code sample, demo, presentation, etc. on it, fill in the type, name, and 
location of that page.  You may also enter a corresponding explanatory note, 
which will appear in the Notes subsection (see target-content-file comments 
about notes).  In your resulting article, a "Downloads" or "More downloads" 
section and a corresponding TOC entry will appear. -->
        <!-- First page; copy for as many pages as your article needs to point to. -->
        <target-content-page target-content-type="Demo" link-text="How to code a widget"
            url-target-page="http://demo-page.html" registration-required="no"></target-content-page>
        <!-- Second page. -->
        <target-content-page target-content-type="Presentation"
            link-text="Why code widgets instead of whatnots"
            url-target-page="http://prez-page.html" registration-required="no">
            <!-- The <note> element is OPTIONAL. -->
            <note>This is a sample note about the presentation.</note>
        </target-content-page>
        <!-- PDF - OPTIONAL. For developerWorks staff use only. 
Size and page count are calculated automatically by CMA.
REMOVE if local-site is not worldwide. 
if you want an author photo to be part of your locally-created 
PDF, you must specify the author element, including the 
image element for the author photo. -->
        <pdf paperSize="common" size="56KB" pages="8"
            url="http://public.dhe.ibm.com/software/dw/java/template-dw-article-6.0-pdf.pdf"/>
        <!-- AUTHOR - REQUIRED
For authors: most fields are required; the optional ones are email-cc, prefix, 
middlename, suffix, and img (for tips on your author photo, see "Illustrating 
your article or tutorial for developerWorks" at: 
http://www.ibm.com/developerworks/library/i-dwgraphics/). 
email-cc includes that e-mail address (such as your developerWorks 
editor's) on any e-mails that readers send to the author. -->
        <!--  For authors: if you have additional authors, add more author elements. -->
        <author jobtitle="Consultant" email-cc=""
            email="david.c.hunn@gmail.com" publish-email="yes">
            <bio></bio>
            <!-- Use a relative URL for your author photo. -->
            <img src="myphoto.jpg" width="64" height="80" alt="Author1 photo"/>
            <author-name>
                <Prefix/>
                <GivenName>David</GivenName>
                <MiddleName>C.</MiddleName>
                <FamilyName>Hunn</FamilyName>
                <Suffix/>
            </author-name>
            <company-name>Alacer</company-name>
        </author>
        <author jobtitle="Senior Solution Architect, Alacer Technology Solutions" email-cc=""
            email="aaron.hoffer@alacergroup.com" publish-email="yes">
            <bio></bio>
            <!-- Use a relative URL for your author photo. -->
            <img src="myphoto.jpg" width="64" height="80" alt="Author2 photo"/>
            <author-name>
                <Prefix/>
                <GivenName>Howard</GivenName>
                <MiddleName>A.</MiddleName>
                <FamilyName>Hoffer</FamilyName>
                <Suffix/>
            </author-name>
            <company-name>Alacer Group</company-name>
        </author>
        <author jobtitle="Managing Partner, Alacer Technology Solutions" email-cc=""
            email="ed@alacergroup.com" publish-email="yes">
            <bio></bio>
            <!-- Use a relative URL for your author photo. -->
            <img src="myphoto.jpg" width="64" height="80" alt="Author3 photo"/>
            <author-name>
                <Prefix/>
                <GivenName>Ed</GivenName>
                <MiddleName></MiddleName>
                <FamilyName>Sarausad</FamilyName>
                <Suffix/>
            </author-name>
            <company-name>Alacer Group</company-name>
        </author>
        <!-- For editors: if you have a regular author that already exists in CMA, 
you can use the following coding for author and then assign all the author 
info from within CMA -->
        <!-- <author jobtitle=""><cma-defined/></author> -->
        <!-- TRANSLATOR optional - name of company or person that 
translated this content.  if company, enter the website url; if person 
enter the person's email -->
        <!-- <translator company-website="" email=""></translator> -->
        <!-- DATE-PUBLISHED - REQUIRED
For developerWorks staff use only. -->
        <date-published day="01" month="12" year="2010"/>
        <!-- DATE-UPDATED - REQUIRED IF this is a major update of content
For developerWorks staff use only. 
<date-updated day="31" month="12" year="2010" /> -->
        <!-- DATE-TRANSLATED - OPTIONAL for local sites; indicates the 
date that this content was translated
 <date-translated month="" year=""/>   -->
        <!-- ABSTRACT - REQUIRED
For authors: DO NOT include HTML tagging, or special characters 
in the abstract. The abstract should be enticing yet succinct. 
Aim for 3 to 5 sentences that express why the reader would care 
about the content (motive) and what he or she can gain from reading 
the content (benefits). The abstract is used for the META 
abstract tag, and in some search results and in the article itself, if 
the editor doesn't provide an abstract-extended element. -->
        <abstract>
            Web server logs can be used to study the browsing habits of users. For example, Sen and Hansen used mixtures of first-order Markov models to discover clusters of Web pages on a web site. They used these models to predict which pages users were likely to request next. They proposed using this information to “pre-fetch” a page before a user actually requests it. In this work, we perform a similar analysis of web server logs to predict how users browse a website. We perform the analysis using IBM InfoSphere Streams combined with R. We use a streaming algorithm to model usage on a website called the Extensible Markov model (EMM). The EMM was developed by Dunham, Meng, and Huang. We use a recent implementation of EMM in R called rEMM created by Hashler and Dunham.
        </abstract>
        <!-- ABSTRACT-EXTENDED
For developerWorks staff use only. If you need HTML tagging or special 
characters in the abstract, or want to include more than 5 sentences, fill 
in the abstract-extended IN ADDITION to the abstract. When both are filled 
in, the abstract is used for the META abstract tag, and in some search 
results, while the abstract-extended appears in the article itself. -->
        <abstract-extended> 
            Web server logs can be used to study the browsing habits of users. For example, <a href="#resources">Sen and Hansen</a> used mixtures of first-order Markov models to discover clusters of Web pages on a web site. They used these models to predict which pages users were likely to request next. They proposed using this information to “pre-fetch” a page before a user actually requests it. In this work, we perform a similar analysis of web server logs to predict how users browse a website. We perform the analysis using IBM InfoSphere Streams combined with R. We use a streaming algorithm to model usage on a website called the Extensible Markov model (EMM). The EMM was developed by <a href="#resources">2004 by Dunham, Meng, and Huang</a>. We use a recent implementation of EMM called rEMM created by <a href="#resources">Hashler and Dunham</a>.
        </abstract-extended>
        <!-- START OF ARTICLE BODY
For authors: your article can contain paragraphs, major headings, minor
headings, code listings, images, tables, sidebars, lists, and highlighting. 

DO NOT copy or cut and paste text from word processors such as 
Microsoft Word. The encoding method they use (even if UTF-8) creates 
invalid characters in the XML. Instead, save the Word document 
as a text file and then copy the text.  -->
        <docbody>
            <heading alttoc="" refname="overview" type="major" back-to-top="no">Overview</heading>
            <!-- PARAGRAPH 
 For authors: Every paragraph needs a beginning and ending element.
 Do not include unordered, ordered, or definition lists within a paragraph. -->
            <!-- LIST  
For authors: You can include ordered (ol) and unordered (ul) lists in your article.  
If you have an ordered list interrupted by a heading and want the numbering to 
continue, use the start attribute. For example, to resume the list at number 6, 
use <ol start="6">.  Do not nest ordered or unordered lists within p elements. -->
            <ul>
                <li>Benefits of streams/R integration</li>
                <li>The Problem: Use web server logs to predict visitors' next content request</li>
                <li>The Solution: Use EMM</li>
                <li>Details of solution</li>
                <li>Results</li>
                <li>Conclusions</li>
                <!-- <li>Opportunities for follow-on work</li> -->
            </ul>
            <!-- MAJOR HEADING 
For authors: major headings appear in the table of contents (TOC)   
that is automatically generated (right nav). If you need to refer to 
this heading, fill in a refname; otherwise, leave refname blank. 
If you want a different or shorter heading to appear in the 
TOC, put it in the alttoc attribute. 
If the rule and "Back to top" link at the bottom of the text under
this major heading overwrite the right column in IE, use the optional 
back-to-top attribute, set to "no" as shown below.
Note: Be sure all refnames you use in your article are unique. -->
            <heading alttoc="" refname="" type="major">Introduction</heading>
            <p>
            	The Extensible Markov Model (EMM), first introduced in <a href="#resources">2004 by Dunham, Meng, and Huang</a>, combines a stream clustering algorithm with a Markov chain. The states of the Markov chain are clusters defined by the stream clustering algorithm. The transition probabilities between states define a temporal component of the model. An important aspect of the EMM is that it is able to train continuously. That is the model can train and predict in a single pass of the data. The EMM is able to change over time by both adding new states as they are encountered and fading or trimming existing states over time. This allows the model to adapt to changes in the simulated system. This could be very useful in the context of modeling traffic on a web site using web server using log files. The web site is likely to exhibit dynamic usage patterns as well as structural changes over time. Thus, a model that can account for these temporal changes in state and usage would seemingly be advantageous. 
            </p>
            <p>
            	In this paper we demonstrate the use of an EMM in modeling and predicting user requests for content on a web site. We use server logs to both train and test the model. The solution is implemented using IBM InfoSphere Streams and R. The application framework is provided by Streams and R is used for modeling and prediction. For the EMM model, we use the rEMM library created by <a href="#resources">Hashler and Dunham</a>.
            </p>
            <!-- MINOR HEADING. For authors: minor headings organize major 
sections into smaller units, and do not appear in the table of contents. 
If you need to refer to this heading, fill in a unique refname; otherwise, 
leave refname blank. -->
            
            <heading alttoc="" refname="" type="major">Benefits of Streams/R Integration</heading>
            <p>
                Most machine learning models used for prediction are trained off-line on large volumes of training data. Once the models are trained, prediction can usually happen in real-time. This method fits many classes of problems, but if the patterns to be predicted change frequently, this approach can generate models that lag beyond system they are trying to predict. Domains like network traffic, automotive traffic, financial transactions, or derivatives trading have patterns that can change quickly. Extensible Markov Models can be trained dynamically and this makes them a good fit to these domains.
            </p>
            <p>
                Web server traffic is a domain with patterns that can change quickly. We demonstrate the use of an EMM to predict what content users will request with their next click when visiting a Web site. The server log provides an endless source of streaming data to train the model while the system is also making predictions.
            </p>
            <!-- <heading refname="" type="minor">Minor heading example</heading>
            <p>This heading will not appear in the table of contents.</p> -->
            <heading alttoc="" refname="" type="major">Predicting Content Requests from Web Server Logs</heading>
            <p>
                The EMM model has been used in analysis of spatiotemporal systems such as network traffic, environmental data, and vehicle traffic. In this work, we demonstrate the use of an EMM in predicting user requests for content on a website.
            </p>
            <heading alttoc="" refname="" type="minor">Web Server Logs</heading>
            <p> 
            	Web servers maintain a log of page requests. Among the items recorded for each request, the server logs the IP address of the requester, the time stamp of the request, and a path to the requested item. <a href="#table1">Table 1</a> below shows three example entries from a web server log. All three entries are from the same IP address for three separate items (two images and an HTML document). Note that server logs typically include two additional columns: a referrer URL and user agent. These three entries could represent a visit (or part thereof) to a web site. 
            </p>

            <heading refname="table1" type="table">Example entries in a web server log</heading>
            <table border="0" cellpadding="0" cellspacing="0" class="ibm-data-table"
                summary="Example entries in a web server log">
                <tr>
                    <th scope="col">IP Address</th>
                    <th scope="col">User name etc</th>
					<th scope="col">Time stamp</th>
                    <th scope="col">Access Request</th>
                    <th scope="col">Result Status Code</th>
                    <th scope="col">Bytes Transferred</th>
                   <!--  <th scope="col">Referrer URL</th>
                    <th scope="col">User Agent</th> -->
                </tr>
                <tr>
                    <td>123.123.123.123</td>
                    <td>- -</td>
                    <td>[26/Apr/2000:00:23:45 -0400]</td>
                    <td>"GET /pics/wpaper.gif HTTP/1.0"</td>
                    <td>200</td>
                    <td>6248</td> 
                   <!--  <td>"http://www.jafsoft.com/asctortf/"</td>
                    <td>"Mozilla/4.05 (Macintosh; I; PPC)"</td> -->
                </tr>
                <tr>
                	<td>123.123.123.123</td>
                    <td>- -</td>
                    <td>[26/Apr/2000:00:23:48 -0400]</td>
                    <td>"GET /index.html HTTP/1.0"</td>
                    <td>200</td>
                    <td>8130</td>
                   <!--  <td>"http://www.jafsoft.com/asctortf/"</td>
                    <td>"Mozilla/4.05 (Macintosh; I; PPC)"</td> -->
                </tr>
                <tr>
                	<td>123.123.123.123</td>
                    <td>- -</td>
                    <td>[26/Apr/2000:00:23:50 -0400]</td>
                    <td>"GET /pics/5star2000.gif HTTP/1.0"</td>
                    <td>200</td>
                    <td>4005</td>
                    <!-- <td>"http://www.jafsoft.com/asctortf/"</td>
                    <td>"Mozilla/4.05 (Macintosh; I; PPC)"</td> -->
                </tr>
            </table>

            <p></p>

            <!-- <heading alttoc="" refname="" type="minor">The Dataset</heading>
            <p>
            	For this exercise, we analyze Web server logs for <a href="#resources">ClarkNet</a>—an Internet access provider for the Metro Baltimore-Washington DC area. The log contains approximately 1.6 million entries spanning a seven day period from midnight August 28, 1995 through midnight of September 3 1995. 
            </p>
            <p>
            	Like <a href="#resources">Sen and Hansen</a>, we limit our interest to requests for HTML pages, PDF documents, and PostScript documents. Thus, we ignore all requests for images (e.g. JPG, GIF), JavaScript, or other non-"content" items. We only include entries that result in successful requests, that is log entries that have results status code 200. We also attempt to filter out requests made by bots or spiders. To identify requests originating from bots we examine every entry in the log and compile a list of IP addresses who access <code type="inline">robots.txt</code>. This is likely not sufficient for a production solution, but for our purposes it likely sufficed. After applying the above filtering criteria, the original 1.6 million lines were reduced to approximate 350 thousand.
            </p>
            <p>
            	The remaining entries are ordered by IP address and then by time stamp. This sorting is necessary, because web servers log requests in the order they are received. Since, most web sites will have multiple simultaneous visitors, the requests for any particular user will be mixed up with other users' requests. Sorting by IP address and then by time stamp recreates the series of requests made by each user of the site. Thus sorted, the entries are split into visits. In this case, we define a visit as a series of GET requests no two of which are greater than 15 minutes apart. Once we have the sorted visits, we have a suitable dataset for training the EMM.
            </p>
            <p>
            	We use a simple single order Markov Model where each page (HTML, PDF, PS) is a node in the graph. We use one additional node to represent a user leaving the site.
            </p> -->

            <heading alttoc="" refname="" type="major">Details of the Solution</heading>
            <p>
            	For this project, we were interested in modeling a web site using a server log file. For our relatively simple model, each requested content item is a state or cluster in the EMM. The transition probabilities are determined by observing the number of people who request page i after requesting page j. In addition to modeling each content item, we also include a state that represents off-site. That is the state prior to a user requesting any content from the web server.
            </p>
            <p>
				<a href="#listing1">Code listing 1</a> below is the main SPL code for our application. The application is composed of five operators. The FileSource operator reads the input server log one line at time and returns it as a tuple with one item. Each line is parsed using an RScript operator that calls an R script. The R script parses out the IP address of the requester and the requested item. This script also analyzes the log entry to determine if it is relevant (per the conditions previously mentioned). The next operator in the pipe is a Filter that will filter any tuples tagged for filtration by the R parsing routine. Tuples that are not filtered are passed to the second RScript operator which passes the path of the requested item to an R script that uses the path to produce a prediction consisting of a list of the twenty most likely content items to be requested next. The resulting prediction is packaged up in a tuple along with the requesting IP address and the requested content item. The final operator, a FileSink operator, writes incoming tuples to an output file.

            </p>
<code type="section" width="100%">
<heading refname="listing1" type="code">SPL code defining the application graph.</heading>
composite Main {
  graph
    // read entries from the log file
    stream&lt;rstring line&gt; 
    inStream = FileSource() {
      param  file : "../data/first-100-test-log.txt";
    } 
 
    // parse the line using an R script
    stream&lt;rstring origin, rstring path&gt; 
    parsedStream = RScript(inStream) {
      param
        initializationScriptFileName : "../rsrc/parse-functions.R";
        rScriptFileName : "../rsrc/parse.R";
        streamAttributes : line;
        rObjects : "log.entry"; 

      output
        parsedStream: origin = fromR("origin"),
                      path = fromR("path");
    }

    // filter out invalid tuples:
    stream&lt;rstring origin, rstring path&gt;
    filteredStream = Filter(parsedStream) {
      param filter : origin != "filter me";
    }

    // call the r script that will create the prediction
    stream&lt;rstring origin, rstring path, list&lt;rstring&gt; prediction&gt; 
    analyzedStream = RScript(filteredStream) {
      param
        initializationScriptFileName : "../rsrc/init_predict.R";
        rScriptFileName : "../rsrc/predict.R";
        streamAttributes : path;
        rObjects : "path";
          
      output
        analyzedStream:
          prediction = fromR("prediction");
    }

    // send the results to a file
    () as dbg = FileSink(analyzedStream) {
      param
        format : csv;
        file   : "result.txt" ;   
    }
}
</code>

<p>
    <a href="listing2">Code listing 2</a> below contains the R functions used in parsing log entries. Note, the application maintains a list of known bot IP addresses. This list is used to label entries associated with bots for filtration. In addition, the script identifies requests for items other than HTML, PDF, or PS documents and marks the returned tuple for filtration.
</p>

<code type="section" width="100%">
<heading refname="listing2" type="code">R functions used in parsing log entries.</heading>
# This script contains functions used to parse a line from
# a web server log.

if (file.exists("../data/bot-list.RData")) {
  load("../data/bot-list.RData")  
} else {
  bot.list &lt;- c("")
}

origin.pattern &lt;- "^\\S+(\\.\\S+)*\\.\\S+"
path.pattern &lt;- "GET\\s+[/\\w]+.\\w+"

get.code &lt;- function(log.entry) {
  # Returns the return code of a web server log entry.
  tokens = unlist(strsplit(x=log.entry, split="\\s+", perl=TRUE))
  code = tokens[length(tokens)-1]
  
  return(code)
}

get.path &lt;- function(log.entry) {
  # Returns the path of the requested resource of a web server log entry.
  path &lt;- regmatches(x=log.entry, m=regexpr(pattern=path.pattern, 
                                               text=log.entry, 
                                               perl=TRUE))
  path &lt;- unlist(strsplit(x=path, split="\\s+", perl=TRUE))[2]
  
  return(path)
}

get.origin &lt;- function(log.entry) {
  # Returns the originating ip or domain from a web server log entry.
  return(regmatches(x=log.entry, m=regexpr(pattern=origin.pattern, 
                                           text=log.entry, 
                                           perl=TRUE)))
}

get.tuple &lt;- function(log.entry) {
  # Returns a two-item list containing the modified origin of the 
  # request and the path to the requested item.
  # The origin will be set to "filter me" if:
  #   -- The return code is not 200
  #   -- The requested file is not HTML, PDF, or PS
  #   -- The origin is determined to be a bot
  origin &lt;- get.origin(log.entry)
  path &lt;- get.path(log.entry)
  code &lt;- get.code(log.entry)
  
  if (code != "200") {
    origin &lt;- "filter me"
  } else if(is.null(path)) {
    origin &lt;- "filter me"
  } else if(path == FALSE) {
    origin &lt;- "filter me"
  } else if (! grepl(pattern="\\S+\\.(htm|html|pdf|ps)$", x=path, perl=TRUE)) {
    origin &lt;- "filter me"
  } else if (origin %in% bot.list) {
    origin &lt;- "filter me"
  }

  return(list(origin, path))
}
</code>

<p>
    <a href="#listing3">Code Listing 3</a> contains the R script called to parse log entries. This script utilizes the functions in <a href="listing2">Code listing 2</a>.
</p>

<code type="section" width="100%">
<heading refname="listing3" type="code">R script called to parse a log entry tuple.</heading>
# This script parses log entries transforming them into tuples
# It parses out the origin of the request and the requested path.
# 
# inputs:  log.entry -- A single line from a web server log.
# outputs: origin -- The origin of the request received by web 
#                    server.
#          path -- The path to the requested item.
#
# The origin will be set to "filter me" if:
#   -- The return code is not 200
#   -- The requested file is not HTML, PDF, or PS
#   -- The origin is determined to be a bot

tuple &lt;- unlist(get.tuple(log.entry))
origin &lt;- tuple[1]
path &lt;- tuple[2]
</code>

<!-- <code type="section" width="100%">
<heading refname="listing4" type="code">R script for initializing the EMM model.</heading>
# Load required libraries
library(rEMM)
library(hash)

# Load the Model
stopifnot(file.exists("../data/emm.RData"))
load(file="../data/emm.RData")

# Load the pages hash table
stopifnot(file.exists("../data/page-hash.RData"))
load(file="../data/page-hash.RData")

# Load the pages list
stopifnot(file.exists("../data/page-list.RData"))
load(file="../data/page-list.RData")
</code> -->

<p>
    We use a trained EMM to predict the next most likely page request. In this case, each state in the EMM represents a page on the site (e.g. an HTML, PDF, or PS document). To predict the next likely requested item, we look up the state associated with the current page. We then use the predict method of the EMM to return a list of the probabilities of transitioning from the current state to all other observed states. To obtain the top twenty most likely, we simply sort the list in descending order and retrieve the states with highest probabilities. Lastly, we convert the predicted states into the corresponding paths.
</p>

<code type="section" width="100%">
<heading refname="listing5" type="code">R script for making predictions using the EMM.</heading>
# inputs:  path -- The path of the last requested item.
# outputs: prediction -- A list of the twenty most likely next paths to be 
#                        requested.

prediction &lt;- vector()
last.request &lt;- page.hash[[path]]
if (! is.null(last.request)) {
  likelihoods &lt;- predict(emm, current_state=last.request, 
                           probabilities=TRUE)
  top.twenty &lt;- names(sort(x=likelihoods, decreasing=TRUE)[1:20])
  for (i in 1:20) {
    prediction[[i]] &lt;- toString(page.list[as.numeric(top.twenty[i])])
  } 
}
</code>

<heading alttoc="" refname="" type="major">Results</heading>
<p>
    The application produces output tuples  composed of the originating IP address, the requested path, and a list of the paths of the twenty most likely items the user will request next. The <a href="#table2">table</a> below contains an example output tuple. 
</p>

<heading refname="table2" type="table">Example Output Tuple</heading>
<table border="0" cellpadding="0" cellspacing="0" class="ibm-data-table"
    summary="Example entries in a web server log">
    <tr>
        <th scope="col">IP Address, Path of requested item, [list of predicted paths]</th>
    </tr>
    <tr>
        <td>"123.123.123.123", "/pub/atomicbk/catalog/sleazbk.html", ["/atomicbk/new/new.html", "/atomicbk/images/gallery.html", "/atomicbk/shocked.html", ...]</td>
    </tr>
</table>

<p>

</p>

<heading alttoc="" refname="" type="major">Conclusion</heading>
<p>
    We demonstrated the use of IBM InfoSphere Stream and R in predicting users' requests for content from a web server using that server's logs. The modeling and predictions were performed using rEMM and implementation of the Extensible Markov Model (EMM) in R. 
</p>
<p>
    Improvements in runtime could be accomplished by more fully leveraging the stream clustering component of the EMM. In the system described here, each content item is represented by a state in the model. This results in a very large number of parameters which negatively impacts the runtime efficiency of the application. To lessen the number of parameters and thus improve running time some sort of clustering of content items would be beneficial. Since the content items are represented by directory paths, they exhibit a natural tree structure. This could be leveraged when extracting feature vectors for use with the EMM. Such vectors would form natural structural clusters. This would reduce the parameter space and result in more efficient prediction running time.
</p>
<p>
    The drawback to this type of strategy would be a loss of granularity. That is, we would not know the transition probabilities between individual content items (as we do in the current configuration). However, this may not be necessary or even desired. 
</p>

            <!-- <heading alttoc="" refname="code-hd" type="major">Code listings</heading>
            <p><a name="code-text">Code listings</a> are common in developerWorks content.
                Limit code lines to no more than 90 characters. See the scale in <xref
                    href="#listing1" link="yes"/> below; you should temporarily set your
                editor's font to Courier or some other monospace font when checking line
                lengths. For longer code lines, you must find suitable places to split the
                lines; long lines do not autowrap. Code lines longer than 90 characters
                will truncate printed-copy text (in typical portrait layout).</p> -->
            <!-- CODE SECTION
For authors: You can include code listings to illustrate your points. 
Limit code lines to no more than 90 characters. If you preview the 
content, any code line that exceeds the maximum available 
width (90 characters) will be flagged with a red ruler in the HTML 
to help you decide where to split the line. Long lines do not 
autowrap, so check your code listings carefully and correct as 
needed. When counting characters, count blanks. Count 
symbols or character entities like "&lt;" and "&quot;" as a 
single character.

Avoid hard-coding blank spaces or tabs at the end of a line of sample code.
Avoid using tabs at the beginning of a line of sample code. If you must indent, 
use blank spaces. Do not use CDATA tags. If you need to display XML tags, 
such as angle brackets, in your sample code, use &lt; and &gt;. Do not use 
color. If you want to highlight a portion of your sample code, use strong
(<strong> and </strong>) instead.

For the code listing itself, type or paste in ASCII code with proper keyboard 
spacing. Use the space key to indent lines. Use &lt; to represent a less-than 
symbol and &gt; to represent a greater-than symbol. Use &amp; for an 
ampersand.  If needed for emphasis, use <strong> and </strong> 
as shown below. 

Include a heading element to provide a caption for each code listing.  If
auto-number="yes" is specified on the dw-article element, your heading text 
will be prefixed with the word "Listing" and the listing number, such as 
"Listing 1. " or "Listing 2. ".

Code sections will match the main column width of the article unless the 
sections are embedded within other elements (lists, sidebars, and so forth). If 
embedded, the code section will be liquid and format to the maximum space 
available. If fixed lines within the code section are larger than the column 
width, scroll bars will automatically appear.  This is not recommended so 
please preview and adjust line lengths where possible.-->
           
            <!-- INLINE CODE (code within a sentence) and HIGHLIGHTING
For authors: when a sentence includes the name of a command, class, object, 
method, code snippet, or anything the user types in, use the inline (monospace) 
code font. Inline code can have no more than 90 consecutive characters without 
a space. -->
            <!-- <p>Use <code type="inline">monospace code font</code> (&lt;code
                type="inline"&gt;) for names of commands, such as the
                <code type="inline">make install</code> command, as well as for classes,
                objects, methods, code snippets, and any text the user types in.</p>
            <p>You can also use <strong>strong</strong> (&lt;strong&gt;) and <em>em</em>
                (&lt;em&gt;) for highlighting text. For example, use the strong element
                for warnings or cautions ("do <strong>not</strong> press Enter"), and use
                the em element for terms defined in content ("<em>Major headings</em>
                appear..."). See <a
                    href="http://www.ibm.com/developerworks/library/i-dwauthors/#highlighting"
                    >developerWorks conventions on highlighting</a>.</p>
            <heading alttoc="" refname="" type="major">Sidebars, figures, and
                tables</heading>
            <p>You can include sidebars, figures, and tables in your article.</p> -->
            
            <!-- SIDEBAR 
For authors: you can include sidebars  in the body of your article, 
but make sure their placement does not collide with code listings, 
tables, or other elements. The heading is highly recommended 
but not required. Sidebars default to right alignment.
EDITOR NOTE:  The following functionality is not working for 6.0 articles.
It is "in process," and we'll update this comment when the functionality is
implemented:  You may use the <include> element for sidebar content
(if you repeatedly use the same sidebar, for example), or, the standard elements.
 For example: 
<sidebar>
    <include relative-url="/developerworks/inc/s-generic-landing-center-docbody-test.inc"/>
</sidebar>
            -->
            <!-- <heading alttoc="" refname="sidebars" type="minor">Sidebars</heading> -->
                        
            <!-- <sidebar>
                <heading refname="" type="sidebar">When to use a sidebar</heading>
                <p>Use a sidebar for a content detour or reinforcement. For example, you
                    might define terms or provide a bit of historical background in a
                    sidebar. Or you might summarize the key points of a lengthy
                    discussion. See a sidebar in action in "<a
                        href="http://www.ibm.com/developerworks/linux/library/l-c99.html"
                        >Open source development using C99</a>". </p>
            </sidebar> -->
<!-- SIDEBAR-CUSTOM - OPTIONAL
For editors (optional): If this article (or tutorial) is referenced as a center-column asset 
in a published knowledge path, add this sidebar linking to that knowledge path.  You can 
include up to three knowledge paths in this one sidebar, assuming multiple knowledge 
paths reference this article (or tutorial).            
            
            <sidebar-custom type="knowledge-path">
                <related-resource>
                    <text>Build RESTful web services with Java technology</text>
                    <url>http://www.ibm.com/developerworks/training/kp/j-kp-rest/</url>
                </related-resource>
                <related-resource>
                    <text>Building and deploying JAX-WS web services</text>
                    <url>http://www.ibm.com/developerworks/training/kp/j-kp-jaxws/</url>
                </related-resource>
                </sidebar-custom>  -->
            
           <!--  <heading alttoc="" refname="figures" type="minor">Figures</heading>
            <p>Technical graphics such as screen captures, diagrams, and photographs can
                enhance and help explain your content. To learn how to create and deliver
                effective graphics, read "<a
                    href="http://www.ibm.com/developerworks/library/i-dwgraphics/"
                    >Illustrating your article or tutorial for developerWorks</a>".</p> -->
<!-- FIGURE 
For authors:  You can include graphics in the sections of an article.

Include a heading element to provide a caption for each figure.  If
auto-number="yes" is specified on the dw-article element, your 
heading text will be prefixed with the word "Figure" and the figure 
number, such as "Figure 1. " or "Figure 2. ".

The alt attribute on the img tag is required and should contain a brief, 
meaningful description of the image for a visually impaired user (limit is 130 
characters). Avoid embedding text inside images, as it cannot be read by 
screen readers. If you cannot avoid including text in an image, include the 
same text as part of the alt text, or in the text surrounding the image. Also, 
pay attention to the use of color in images. To ensure your graphic meets 
accessibility requirements, do not use color as the only method of conveying 
meaning. Color can emphasize a point for a sighted user, but should not be 
the only means of conveying a message.
  
Images should be in gif or jpg format, and no wider than is needed to convey 
a concept, up to a maximum of 580 pixels as shown in Figure 1. If the width 
attribute of your image is greater than 580, the stylesheet will display an error 
message in the HTML output instead of your image. If you include the figure 
in a list, such as a screenshot in a numbered procedure, the maximum width 
should be reduced by 36 pixels for each level of nesting. Code the figure inside 
the list item, like this: 
<ol>
        <li>Select the Java Beans view, as shown in the following figure: 
            <figure>
                <heading refname="fig1" type="figure" alttoc="">Heading for figure 1</heading>
		<img alt="Alternative text for image" src="mytutorialdirectory/figure.gif"
		    width="544" height="100"/>
            </figure>
        </li>
</ol>   
For additional advice, see "Illustrating your article or tutorial for developerWorks" 
at: http://www.ibm.com/developerworks/library/i-dwgraphics/ -->
            <!-- <figure>
                <heading refname="fig1" type="figure" alttoc="">Process for turning log entries into training data for the First Order Markov Model</heading> -->
                <!-- ***  Example shows a properly coded alt attribute *** -->
               <!--  <img src="data-flow.png" width="580" height="250"
                    alt=""
                />
            </figure> -->
            <!-- <heading refname="links" type="major">Links and cross references</heading> -->
            <!-- LINKING TO OTHER SECTIONS OF THE ARTICLE  
For authors: As needed, link to other headings, figures, code listings, 
tables, or text as shown here.  Note that all link names in the
document must be distinct. 
    - To link to resources or downloads (standard headings), use 
        <a href="#resources">Resources</a> or 
        <a href="#downloads">Downloads</a>.    
     - To link to a heading, use 
        <a href="#xxx">Heading</a>
     - To link to a heading, figure, code listing, or standard table:
        If auto-number="yes" is specified on the dw-article element, use 
        <xref href="#xxx" link="yes"/>
             where "xxx" is the refname on the heading (figures, code listings, 
             and tables use headings to add their captions).
       The correct cross reference text, "Listing 1", "Figure 2", or "Table 3", will be 
       inserted automatically. Note: use link="no"  (or omit it altogether) if you just 
       want the cross reference text without a link, such as for a figure that is 
       immediately below the cross reference. If auto-number="no" is specified 
       on the dw-article element (not recommended), you will need to use an 
       <a> element as for headings and manage your own text and numbering.
     - To link to a table that uses the caption element (not recommended) instead 
            of a heading-style caption, use 
        <a href="#xxx">Table 1</a> 
	where "xxx" is coded in <a name="xxx" /> just above the table.
     - To link to stand-alone text, use <a href="#xxx">, where "xxx" is an anchor 
	at the target text (as in <a name="xxx">target text</a>).
-->
            <!-- <p>To keep readers engaged with your content, and not wandering away
                mid-article to pursue some other author's content, try to <strong>minimize
                    off-site links</strong> in the body of your article. Instead, in the
                body, link to the <a href="#resources">Resources</a> heading and include
                related content (articles, tutorials, developerWorks downloads, views,
                technical briefings, Webcasts, demos, books, Web sites, or offers) and
                urls there. Likewise, for code downloads and demos, don't include the urls
                in the body; rather, link to the <a href="#download">Downloads</a> section
                and include the urls there.</p> -->
            <!-- <p>On the other hand, <strong>link freely to elements within the
                    article</strong>, such as headings, figures, code listings, and
                tables, <strong>and to other developerWorks content</strong>, especially
                if the article is part of a series. For serial content, include at least
                one link to the entire series in the body of the article. (In addition,
                include a link to the entire series in the abstract and Resources
                section.)</p> -->
            <!-- <p>To sum up, you can include these types of links in the body of your
                article:</p> -->
            <!-- <ul>
                <li>
                    <strong>Link to "Resources"</strong>: See the <a href="#resources"
                        >Resources</a> section for a link. <br/><br/>
                </li>
                <li><strong>Link to "Downloads"</strong>: See the <a href="#download"
                        >Downloads</a> section to download the code. <br/><br/>
                </li>
                <li><strong>Link to a heading</strong>: See how to add sidebars to your
                    article in <xref href="#sidebars" link="yes" />. <br/><br/>
                </li>
                <li><strong>Link to a code listing</strong>: See <xref href="#listing1"
                        link="yes"/> for a sample code listing. <br/><br/>
                </li>
                <li><strong>Link to a figure</strong>: See <xref href="#fig1" link="yes"/>
                    for a 580 ruler that shows the maximum width for an image. <br/><br/>
                </li>
                <li><strong>Link to a table</strong>: See <xref href="#table1" link="yes"
                    /> for a sample table. <br/><br/>
                </li>
                <li>
                    <strong>Link to text</strong>: Find more detail about the <a
                        href="#code-text">maximum width of code listings</a>. </li>
            </ul> -->
            
           <!--  <heading refname="includes" type="major">Include content from another file</heading>
            INCLUDING CONTENT FROM ANOTHER FILE  
                For EDITORS: If you need to embed content in this article from another file (for example, a table used in an article series that
                is common to all articles in that series and that will be updated as the series progresses), use the include element 
                shown below.  The associated include will be displayed when the article is previewed in the production environment.
                The relative-url attribute specifies the location of the include in the production environment.
            <p>Editors may use the include element to include content from another file.</p>
            <include relative-url="/developerworks/inc/sample-developerworks-article-include.inc"/> -->
            
            <!-- END OF ARTICLE BODY
For developerWorks staff use only. -->
        </docbody>
        <!-- TRADEMARKS
For editors: Trademarks and My developerWorks terms and conditions links
are in the article ftl now. -->
        <!--  RESOURCES
For authors (optional but recommended): include links to Web content cited in 
the article, as well as links to other related articles, tutorials, developerWorks 
downloads, views, Web sites, forums, blogs, tech briefings, Webcasts, demos, 
books, or offers related to the topic. Aim for 7 to 12 resources divided into the 
categories of "Learn," "Get products and technologies," and "Discuss." 
  
In the resulting article, resources appear in the "Resources" section at the end 
of the article. Resource items are grouped into categories, provided: 
  - You have at least three resource elements, total
  - You have at least one item in at least two categories  
Even if the resources are not clustered by category in the xml file, they will be
in the html.
  
Resources can be on developerWorks, alphaWorks, IBM product or research 
sites, or non-IBM sites. Do NOT include links to download files related to the 
article (use target-content-file above), nor links to a discussion forum URL if 
you coded the <forum-url> element (this link will be added automatically). 
   -->
        <resources>
            <resource resource-category="Learn">
            	<a href="http://www.jstatsoft.org/v35/i05/paper">
                    M. Hahsler and M. H. Dunham, “rEMM: Extensible Markov Model for Data Stream Clustering in R,” Journal of Statistical Software, vol. 35, no. 5, pp. 1–31, 2010.
                </a>
            </resource>
            <!-- For authors (optional): example of a resource that links to a dW content area. -->
            <resource resource-category="Learn"> 
            	<a href="http://www.jstor.org/discover/10.2307/1391073?uid=3739960&amp;uid=2129&amp;uid=2&amp;uid=70&amp;uid=4&amp;uid=3739256&amp;sid=21103603113867">
                    R. Sen and M. H. Hansen, “Predicting Web Users’ Next Access Based on Log Data,” Journal of Computational and Graphical Statistics, vol. 12, no. 1, pp. 143–155, Mar. 2003.
                </a>
			</resource>
            <!-- For authors (optional): example of a resource that links to a dW event. -->
            <resource resource-category="Learn">
                <a href="http://ieeexplore.ieee.org/xpl/login.jsp?tp=&amp;arnumber=1410313&amp;url=http%3A%2F%2Fieeexplore.ieee.org%2Fxpls%2Fabs_all.jsp%3Farnumber%3D1410313">
                    M. H. Dunham, Y. Meng, and J. Huang, “Extensible Markov Model,” in Data Mining, 2004. ICDM’04. Fourth IEEE International Conference on, 2004, pp. 371–374.
                </a>
            </resource>
            <resource resource-category="Learn">
                <a href="http://ita.ee.lbl.gov/html/contrib/ClarkNet-HTTP.html">
                    S. Balbach, M. Arlitt, and C Williamson, 1996, [Online] Available: http://ita.ee.lbl.gov/html/contrib/ClarkNet-HTTP.html
                </a>
            </resource>
            <!-- For authors (optional): example of a resource that links to dW Live!
briefings main page. -->
           <!--  <resource resource-category="Learn"> Attend a <a
                    href="http://www.ibm.com/developerworks/offers/techbriefings/">free 
                    developerWorks Live! briefing</a> to get up-to-speed quickly on IBM 
                    products and tools as well as IT industry trends. </resource> -->
            <!-- For authors (optional): example of a resource that links to a dW outreach
program. -->
            <!-- <resource resource-category="Learn"> Follow <a
                    href="http://www.twitter.com/developerworks/">developerWorks on
                Twitter</a>.</resource> -->
            <!-- For authors (optional): example of a resource that links to dW on-demand
demos. -->
            <!-- <resource resource-category="Learn"> Watch <a
                    href="http://www.ibm.com/developerworks/offers/lp/demos/">developerWorks 
                    on-demand demos</a> ranging from product installation and setup demos for 
                    beginners, to advanced functionality for experienced developers. </resource> -->
            <!-- For authors (optional): example of a resource that links to a dW product
evaluation page. -->
            <!-- <resource resource-category="Get products and technologies">
                <a href="http://www.ibm.com/developerworks/downloads/">Evaluate IBM 
                products</a> in the way that suits you best: Download a product trial, try 
                a product online, use a product in a cloud environment, or spend a few hours 
                in the <a href="http://www.ibm.com/developerworks/downloads/soasandbox/index.html">
                SOA Sandbox</a> learning how to implement Service Oriented Architecture efficiently.
            </resource> -->
            <!-- For authors (optional): example of a resource that links to a dW product
evaluation page. -->
            <!-- <resource resource-category="Discuss"> Get involved in the <a
                    href="http://www.ibm.com/developerworks/community/"> My developerWorks 
                community</a>. Connect with other developerWorks users while exploring the
                developer-driven blogs, forums, groups, and wikis. </resource> -->
        </resources>
        <!-- DO NOT REMOVE <journal-info> elements if this is a technical journal -->
        <journal-info journal-name="IBM Business Process Management Journal"
            journal-icon="tile_bpm.jpg"
            journal-url="http://www.ibm.com/developerworks/websphere/bpmjournal/"/>
        <journal-info journal-name="IBM WebSphere Developer Technical Journal"
            journal-icon="websphere.jpg"
            journal-url="http://www.ibm.com/developerworks/websphere/techjournal/"/>
        <journal-info journal-name="The Rational Edge" journal-icon="rational.jpg"
            journal-url="http://www.ibm.com/developerworks/rational/rationaledge/"/>
        <journal-info journal-name="IBM Data Management Magazine" journal-icon=""
            journal-url="http://www.ibm.com/developerworks/data/dmmag/"/>
        <!-- LINK-TO-ENGLISH Optional element If this is on a local site, this
 is the link to the english language article
-->
        <link-to-english/>
    </dw-article>
</dw-document>
